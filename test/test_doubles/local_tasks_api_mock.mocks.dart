// Mocks generated by Mockito 5.4.2 from annotations
// in todo_list_app/test/test_doubles/local_tasks_api_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_list_app/features/tasks/domain/api/local_tasks_api.dart'
    as _i3;
import 'package:todo_list_app/features/tasks/domain/models/task_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTask_0 extends _i1.SmartFake implements _i2.Task {
  _FakeTask_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalTasksApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalTasksApi extends _i1.Mock implements _i3.LocalTasksApi {
  MockLocalTasksApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Task>> getTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Task>>.value(<_i2.Task>[]),
      ) as _i4.Future<List<_i2.Task>>);
  @override
  _i4.Future<_i2.Task> getTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [id],
        ),
        returnValue: _i4.Future<_i2.Task>.value(_FakeTask_0(
          this,
          Invocation.method(
            #getTask,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Task>);
  @override
  _i4.Future<_i2.Task> addTask(_i2.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Task>.value(_FakeTask_0(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Task>);
  @override
  _i4.Future<_i2.Task> updateTask(_i2.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Task>.value(_FakeTask_0(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Task>);
  @override
  _i4.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteTaskWithoutInternet(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTaskWithoutInternet,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
